#!/usr/bin/env python3
import socket, threading, sys, time, subprocess

hostname = socket.gethostname()
IPAddr = socket.gethostbyname(hostname)

output = subprocess.check_output("ipconfig getifaddr en0", shell=True).decode().strip()

print("What is your ip(leave blank for " + output + ")")
host = input("| => ")
port = 4200
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
if host == "":
    s.bind((output,port))
else:
    s.bind((host,port))
s.listen()
clients = {}
addresses = {}
print("[\u001b[32m✔︎\u001b[0m]      Sockets bound")
time.sleep(0.5)
if host == "":
    print("[\u001b[32m✔︎\u001b[0m]      Server successfuly started running on ip: " + output + ":" + str(port))
else:
    print("[\u001b[32m✔︎\u001b[0m]      Server successfuly started running on ip: " + host + ":" + str(port))
time.sleep(0.5)
print("[\u001b[32m✔︎\u001b[0m]      Server is running")
serverRunning = True
def handle_client(conn):
    try:
        data = conn.recv(1024).decode('utf8')
        welcome = 'Welcome %s! If you ever want to quit, type "{quit}" to exit' % data
        conn.send(bytes(welcome, "utf8"))
        msg = "%s has joined the chat" % data
        broadcast(bytes(msg, "utf8"))
        clients[conn] = data
        while True:
            found = False
            response = 'Number of People Online\n'
            msg1 = conn.recv(1024)

            if msg1 != bytes("{quit}", "utf8"):
                broadcast(msg1, data+": ")
            else:
                conn.send(bytes("{quit}", "utf8"))
                conn.close()
                del clients[conn]
                broadcast(bytes("%s has left the chat." % data, "utf8"))
                print("[\u001b[31mx\u001b[0m]      %s has left the chat." % data)
                break
    except:
        print("[\u001b[31mx\u001b[0m]       %s has left the chat." % data)
def broadcast(msg, prefix=""):
    for sock in clients:
        sock.send(bytes(prefix, "utf8")+msg)


while True:
    conn,addr = s.accept()
    conn.send("Enter username: ".encode("utf8"))
    print("[\u001b[32m✔︎\u001b[0m]      %s:%s has connected." % addr)
    addresses[conn] = addr
    threading.Thread(target = handle_client, args = (conn,)).start()
