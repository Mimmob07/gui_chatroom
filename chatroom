#!/usr/bin/env python3
import tkinter as tk
import time
import os
import ast
import socket, threading, sys

# other stuff
f = open("login_info.txt", "r")
contents = f.read()
f.close()
users = ast.literal_eval(contents)
# variables
global bag
stuff = ""
newlist = []
login = ""
inp = ("| => ")
bag = "grey18"
TK_SILENCE_DEPRECATION = 1

rw = tk.Tk()
rw.title("Login")
rw.configure(bg=bag)
rw.geometry("500x200")


def echo_data(sock):
    while True:
        try:
            msg = sock.recv(1024).decode('utf8')
            msg_list.insert(tk.END, msg)
            msg_list.see(tk.END)
        except OSError:
            break


def send(event=None):
    msg = my_msg.get()
    my_msg.set("")
    s.send(bytes(msg, "utf8"))
    if msg == "{quit}":
        s.close()
        top.destroy()
        exit()
    elif msg == "!serverip":
        meag = "Bot: The serverip is" + servername
        msg_list.insert(tk.END, meag)
    elif msg == "!localip":
        mesg = "Bot: Your ip is " + IPAddr
        msg_list.insert(tk.END, mesg)
        msg_list.insert(tk.END, "Bot: Your ip didnt get sent to the others in chat")
    elif msg == "!raven":
        os.system("./Raven-Storm")
    elif msg == "!port":
        msg_list.insert(tk.END, port)
    elif msg == "!help":
        line1 = 'server commands:'
        line2 = '{quit}              closes the connection to the server and quits the app'
        line3 = '!serverip		returns server ip adress'
        line4 = '!localip		returns local ip adress'
        line5 = '!raven		Starts raven-storm'
        line6 = '!port          returns port your connected to the host by'
        line99 = 'Note: whatever the bot returns does not get sent to the others'
        msg_list.insert(tk.END, line1)
        msg_list.insert(tk.END, line2)
        msg_list.insert(tk.END, line3)
        msg_list.insert(tk.END, line4)
        msg_list.insert(tk.END, line5)
        msg_list.insert(tk.END, line6)
        msg_list.insert(tk.END, line99)


def on_closing(event=None):
    my_msg.set("{quit}")
    send()


def q():
    sett.destroy()


def ex():
    s.close()
    top.destroy()
    exit()


def settings():
    global sett
    sett = tk.Tk()
    sett.title("Settings")
    sett.configure(bg=bag)
    sett.geometry("500x200")

    la = tk.Label(sett, text="Close: ", fg='white', bg=bag).grid(row=0)
    butters = tk.Button(sett, text="close", command=q).grid(row=0, column=1)

    la1 = tk.Label(sett, text="Quit: ", fg='white', bg=bag).grid(row=1)
    butters1 = tk.Button(sett, text="quit", command=ex).grid(row=1, column=1)

    tk.mainloop()


def chatroom(host):
    hot = host
    global port
    port = 4200
    global s
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    global top
    top = tk.Tk()
    top.title("Chat Room")
    top.configure(bg=bag)

    messages_frame = tk.Frame(top)
    global my_msg
    my_msg = tk.StringVar()
    scrollbar = tk.Scrollbar(messages_frame)
    global msg_list
    msg_list = tk.Listbox(messages_frame, height=15, width=100, yscrollcommand=scrollbar.set, bg=bag, fg="white")
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    msg_list.pack(side=tk.LEFT, fill=tk.BOTH)
    msg_list.pack()
    messages_frame.pack()

    entry_field = tk.Entry(top, textvariable=my_msg, width="90")
    entry_field.insert(0, username)
    entry_field.bind("<Return>", send)
    entry_field.pack(side=tk.LEFT)

    but = tk.Button(top, text="      Send      ", command=send)
    but.pack()

    top.protocol("WM_DELETE_WINDOW", on_closing)

    address = (host, port)
    s.connect(address)

    threading.Thread(target=echo_data, args=(s,)).start()

    tk.mainloop()


def login(self):
    global username
    username = e1.get()
    password = e2.get()
    global servername
    servername = e3.get()
    if username in users:
        if password == users[username]:
            rw.destroy()
            print("\nlogin successful!\n")
            chatroom(servername)


def createnu(self):
    username = en1.get()
    password = en2.get()
    servername = en3.get()
    if username in users:
        print("\nLogin name alredy exsist!\n")
        exit()
    else:
        users[username] = password
        stuff = contents.split('}', 1)
        newlist = ', "' + username + '" : "' + password + '"}'
        print(newlist)
        f = open("/Users/mimmo/gui_chatroom/login_info.txt", "w")
        for element in stuff:
            f.write(element)
        f.write(newlist)
        f.close()
        login = username
        nu.destroy()
        chatroom(servername)


def new_usr():
    rw.destroy()
    global nu
    nu = tk.Tk()
    nu.title("New User")
    nu.configure(bg=bag)
    nu.geometry("500x200")

    d = tk.Label(nu, text="Username:", fg='white', bg=bag).grid(row=0)
    e = tk.Label(nu, text="Password:", fg='white', bg=bag).grid(row=1)
    f = tk.Label(nu, text="Server IP:", fg='white', bg=bag).grid(row=2)

    global en1
    en1 = tk.Entry(nu)
    global en2
    en2 = tk.Entry(nu, show="*")
    global en3
    en3 = tk.Entry(nu)
    en3.insert(0, 'ex: 127.0.0.0')
    en3.bind("<Return>", createnu)

    en1.grid(row=0, column=1)
    en2.grid(row=1, column=1)
    en3.grid(row=2, column=1)

    nu.mainloop()

hostname = socket.gethostname()
IPAddr = socket.gethostbyname(hostname)

a = tk.Label(rw, text="Username:", fg='white', bg=bag).grid(row=0)
b = tk.Label(rw, text="Password:", fg='white', bg=bag).grid(row=1)
c = tk.Label(rw, text="Server IP:", fg='white', bg=bag).grid(row=2)
d = tk.Label(rw, text="New User:", fg='white', bg=bag).grid(row=3)

e1 = tk.Entry(rw)
e2 = tk.Entry(rw, show="*")
e3 = tk.Entry(rw)
b1 = tk.Button(rw, text="New User", command=new_usr)
e2.bind("<Return>", login)
e3.insert(0, IPAddr)
e3.bind("<Return>", login)

e1.grid(row=0, column=1)
e2.grid(row=1, column=1)
e3.grid(row=2, column=1)
b1.grid(row=3, column=1)

rw.mainloop()
